// <auto-generated />
using System;
using BusinessBanking.DAL.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessBanking.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessBanking.Domain.Entity.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CurrencyID")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("CurrencyID")
                        .HasColumnOrder(2);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CurrencyName")
                        .HasColumnOrder(4);

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CurrencySymbol")
                        .HasColumnOrder(3);

                    b.HasKey("ID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.CustomerAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("AccountName")
                        .HasColumnOrder(6);

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("char(16)")
                        .HasColumnName("AccountNo")
                        .HasColumnOrder(4);

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccountType")
                        .HasColumnOrder(3);

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(17,2)")
                        .HasColumnName("AvailableBalance")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("date")
                        .HasColumnName("CloseDate")
                        .HasColumnOrder(10);

                    b.Property<string>("CurrencyID")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("CurrencyID")
                        .HasColumnOrder(5);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("date")
                        .HasColumnName("OpenDate")
                        .HasColumnOrder(8);

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasColumnOrder(2);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("char(25)")
                        .HasColumnName("Login")
                        .HasColumnOrder(3);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password")
                        .HasColumnOrder(4);

                    b.Property<int>("UserAccess")
                        .HasColumnType("int")
                        .HasColumnName("UserAccess")
                        .HasColumnOrder(5);

                    b.HasKey("ID");

                    b.HasAlternateKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CustomerID = 1,
                            Login = "user",
                            Password = "ee11cbb19052e40b07aac0ca060c23ee",
                            UserAccess = 1
                        });
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.CustomerAccount", b =>
                {
                    b.HasOne("BusinessBanking.Domain.Entity.Currency", "Currency")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CurrencyID")
                        .HasPrincipalKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessBanking.Domain.Entity.User", "User")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerID")
                        .HasPrincipalKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.Currency", b =>
                {
                    b.Navigation("CustomerAccounts");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.User", b =>
                {
                    b.Navigation("CustomerAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
