// <auto-generated />
using System;
using BusinessBanking.DAL.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessBanking.DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230815130345_InitCreate")]
    partial class InitCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Cyrillic_General_CI_AS")
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessBanking.Domain.Entity.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CurrencyID")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("CurrencyID")
                        .HasColumnOrder(2);

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CurrencyName")
                        .HasColumnOrder(4);

                    b.Property<string>("CurrencySymbol")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CurrencySymbol")
                        .HasColumnOrder(3);

                    b.HasKey("ID");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CurrencyID = "036",
                            CurrencyName = "Австралийский доллар",
                            CurrencySymbol = "AUD"
                        },
                        new
                        {
                            ID = 2,
                            CurrencyID = "124",
                            CurrencyName = "Канадский доллар",
                            CurrencySymbol = "CAD"
                        },
                        new
                        {
                            ID = 3,
                            CurrencyID = "156",
                            CurrencyName = "Китайский юань",
                            CurrencySymbol = "CNY"
                        },
                        new
                        {
                            ID = 4,
                            CurrencyID = "203",
                            CurrencyName = "Чешская крона",
                            CurrencySymbol = "CZK"
                        },
                        new
                        {
                            ID = 5,
                            CurrencyID = "250",
                            CurrencyName = "Французский франк",
                            CurrencySymbol = "FRF"
                        },
                        new
                        {
                            ID = 6,
                            CurrencyID = "276",
                            CurrencyName = "Немецкая марка",
                            CurrencySymbol = "DEM"
                        },
                        new
                        {
                            ID = 7,
                            CurrencyID = "392",
                            CurrencyName = "Японская йена",
                            CurrencySymbol = "JPY"
                        },
                        new
                        {
                            ID = 8,
                            CurrencyID = "398",
                            CurrencyName = "Тенге",
                            CurrencySymbol = "KZT"
                        },
                        new
                        {
                            ID = 9,
                            CurrencyID = "417",
                            CurrencyName = "Сом Кыргызской Республики",
                            CurrencySymbol = "KGS"
                        },
                        new
                        {
                            ID = 10,
                            CurrencyID = "528",
                            CurrencyName = "Нидерландский гульден",
                            CurrencySymbol = "NLG"
                        },
                        new
                        {
                            ID = 11,
                            CurrencyID = "643",
                            CurrencyName = "Российский рубль",
                            CurrencySymbol = "RUB"
                        },
                        new
                        {
                            ID = 12,
                            CurrencyID = "724",
                            CurrencyName = "Испанская песета",
                            CurrencySymbol = "ESP"
                        },
                        new
                        {
                            ID = 13,
                            CurrencyID = "752",
                            CurrencyName = "Шведская крона",
                            CurrencySymbol = "SEK"
                        },
                        new
                        {
                            ID = 14,
                            CurrencyID = "756",
                            CurrencyName = "Швейцарский франк",
                            CurrencySymbol = "CHF"
                        },
                        new
                        {
                            ID = 15,
                            CurrencyID = "784",
                            CurrencyName = "Дирхам ОАЭ",
                            CurrencySymbol = "AED"
                        },
                        new
                        {
                            ID = 16,
                            CurrencyID = "826",
                            CurrencyName = "Английский фунт",
                            CurrencySymbol = "GBP"
                        },
                        new
                        {
                            ID = 17,
                            CurrencyID = "840",
                            CurrencyName = "ДОЛЛАР США",
                            CurrencySymbol = "USD"
                        },
                        new
                        {
                            ID = 18,
                            CurrencyID = "949",
                            CurrencyName = "Турецкая лира",
                            CurrencySymbol = "TRY"
                        },
                        new
                        {
                            ID = 19,
                            CurrencyID = "959",
                            CurrencyName = "Золото",
                            CurrencySymbol = "XAU"
                        },
                        new
                        {
                            ID = 20,
                            CurrencyID = "961",
                            CurrencyName = "Серебро",
                            CurrencySymbol = "XAG"
                        },
                        new
                        {
                            ID = 21,
                            CurrencyID = "962",
                            CurrencyName = "Платина",
                            CurrencySymbol = "XPT"
                        },
                        new
                        {
                            ID = 22,
                            CurrencyID = "974",
                            CurrencyName = "Белорусский рубль",
                            CurrencySymbol = "BYR"
                        },
                        new
                        {
                            ID = 23,
                            CurrencyID = "978",
                            CurrencyName = "ЕВРО",
                            CurrencySymbol = "EUR"
                        },
                        new
                        {
                            ID = 24,
                            CurrencyID = "980",
                            CurrencyName = "Украинская гривна",
                            CurrencySymbol = "UAH"
                        });
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.CustomerAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("AccountName")
                        .HasColumnOrder(6);

                    b.Property<string>("AccountNo")
                        .IsRequired()
                        .HasColumnType("char(16)")
                        .HasColumnName("AccountNo")
                        .HasColumnOrder(4);

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint")
                        .HasColumnName("AccountType")
                        .HasColumnOrder(3);

                    b.Property<decimal>("AvailableBalance")
                        .HasColumnType("decimal(17,2)")
                        .HasColumnName("AvailableBalance")
                        .HasColumnOrder(7);

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("date")
                        .HasColumnName("CloseDate")
                        .HasColumnOrder(10);

                    b.Property<string>("CurrencyID")
                        .IsRequired()
                        .HasColumnType("char(3)")
                        .HasColumnName("CurrencyID")
                        .HasColumnOrder(5);

                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("EndDate")
                        .HasColumnOrder(9);

                    b.Property<DateTime>("OpenDate")
                        .HasColumnType("date")
                        .HasColumnName("OpenDate")
                        .HasColumnOrder(8);

                    b.HasKey("ID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerAccounts");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AccountName = "Банковские счета юридических лиц",
                            AccountNo = "1240020000000001",
                            AccountType = (byte)0,
                            AvailableBalance = 137.53m,
                            CurrencyID = "840",
                            CustomerID = 1,
                            EndDate = new DateTime(2024, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7975),
                            OpenDate = new DateTime(2023, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7960)
                        },
                        new
                        {
                            ID = 2,
                            AccountName = "Банковские счета ИП ",
                            AccountNo = "1240020000000002",
                            AccountType = (byte)0,
                            AvailableBalance = 49315.07m,
                            CurrencyID = "417",
                            CustomerID = 1,
                            EndDate = new DateTime(2024, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7988),
                            OpenDate = new DateTime(2023, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7987)
                        },
                        new
                        {
                            ID = 3,
                            AccountName = "Классический 365/факт",
                            AccountNo = "1243010000000001",
                            AccountType = (byte)1,
                            AvailableBalance = 1000000m,
                            CurrencyID = "417",
                            CustomerID = 1,
                            EndDate = new DateTime(2024, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7993),
                            OpenDate = new DateTime(2023, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7992)
                        },
                        new
                        {
                            ID = 4,
                            AccountName = "Банковские счета физ. лиц ",
                            AccountNo = "1240020000000003",
                            AccountType = (byte)0,
                            AvailableBalance = 1502.75m,
                            CurrencyID = "643",
                            CustomerID = 2,
                            EndDate = new DateTime(2024, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7998),
                            OpenDate = new DateTime(2023, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(7997)
                        },
                        new
                        {
                            ID = 5,
                            AccountName = "Классический 365/факт",
                            AccountNo = "1243010000000002",
                            AccountType = (byte)1,
                            AvailableBalance = 5000000m,
                            CurrencyID = "643",
                            CustomerID = 2,
                            EndDate = new DateTime(2024, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(8003),
                            OpenDate = new DateTime(2023, 8, 15, 19, 3, 45, 588, DateTimeKind.Local).AddTicks(8002)
                        });
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasColumnOrder(2);

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("char(25)")
                        .HasColumnName("Login")
                        .HasColumnOrder(3);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password")
                        .HasColumnOrder(4);

                    b.Property<int>("UserAccess")
                        .HasColumnType("int")
                        .HasColumnName("UserAccess")
                        .HasColumnOrder(5);

                    b.HasKey("ID");

                    b.HasAlternateKey("Login");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CustomerID = 1,
                            Login = "user",
                            Password = "ee11cbb19052e40b07aac0ca060c23ee",
                            UserAccess = 1
                        },
                        new
                        {
                            ID = 2,
                            CustomerID = 2,
                            Login = "test",
                            Password = "098f6bcd4621d373cade4e832627b4f6",
                            UserAccess = 1
                        });
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.CustomerAccount", b =>
                {
                    b.HasOne("BusinessBanking.Domain.Entity.Currency", "Currency")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CurrencyID")
                        .HasPrincipalKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessBanking.Domain.Entity.User", "User")
                        .WithMany("CustomerAccounts")
                        .HasForeignKey("CustomerID")
                        .HasPrincipalKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.Currency", b =>
                {
                    b.Navigation("CustomerAccounts");
                });

            modelBuilder.Entity("BusinessBanking.Domain.Entity.User", b =>
                {
                    b.Navigation("CustomerAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
